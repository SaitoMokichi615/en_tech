# -*- coding: utf-8 -*-
"""NeuralNetwork.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-8uASLSXunJeSW2d16uQ524DBzeqNoN-
"""

#TensorFlowとKerasによる、ニューラルネットワークの手書き数字（MNISTデータセット）学習
import tensorflow as tf
import keras 
from keras.models import Sequential
from keras.layers import Dense, Dropout
from keras.optimizers import RMSprop
from keras.datasets import mnist
import matplotlib.pyplot as plt
# %matplotlib inline

#入力データ(MNISTデータセット)を読み込む
(x_train, t_train), (x_test, t_test) = mnist.load_data()
num_classes = 10

#訓練データ、検証データ、テストデータ、正解ラベルを生成する
x_train = x_train.reshape(60000, 784)
x_test = x_test.reshape(10000, 784)
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255
t_train = keras.utils.to_categorical(t_train, num_classes)
t_test = keras.utils.to_categorical(t_test, num_classes)
 
#ニューラルネットワークを構築
model = Sequential()
model.add(Dense(512, activation='relu', input_shape=(784,)))
model.add(Dropout(0.2))
model.add(Dense(512, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(num_classes, activation='softmax'))

#構築したニューラルネットワークの情報を表示
model.summary()

#ニューラルネットワークをコンパイル（損失関数は「交差エントロピー誤差」、最適化手法は「RMSprop」、性能評価は「認識率」）
model.compile(loss='categorical_crossentropy', optimizer=RMSprop(),metrics=['accuracy'])

#ミニバッチのサイズを100、エポック数を100として、学習を実行
history = model.fit(x_train, t_train, batch_size=100, epochs=16, verbose=1, validation_data=(x_test, t_test))
score = model.evaluate(x_test, t_test, verbose=0)

#学習の推移を出力
plt.plot(history.history['acc'],"o-",label="accuracy")
plt.plot(history.history['val_acc'],"o-",label="val_acc")
plt.title('model accuracy')
plt.xlabel('epoch')
plt.ylabel('accuracy')
plt.legend(loc="lower right")
plt.show()

